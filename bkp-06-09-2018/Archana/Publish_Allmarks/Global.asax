<%@ Application Classname="Global" Language="C#" %>
<script runat="server">
   
private System.Threading.Timer _timer;

protected void Application_BeginRequest(object sender, EventArgs e)
{
    // CHECK FOR "NEW COOKIE PLEASE" INDICATOR
    string ncp = Request.QueryString["NCP"];
    if (ncp != null)
    {
        HttpCookie authCookie = Response.Cookies["ACGOLD.ASPXAUTH"];
        if (authCookie != null) authCookie.Expires = DateTime.Now.AddYears(-1);
        HttpCookie anonCookie = Response.Cookies["ACGOLD.ASPXANONYMOUS"];
        if (anonCookie != null) anonCookie.Expires = DateTime.Now.AddYears(-1);
        HttpCookie sessionCookie = Response.Cookies["ACGOLD.SESSIONID"];
        if (sessionCookie != null) sessionCookie.Expires = DateTime.Now.AddYears(-1);
        
        // REMOVE NCP QUERY PARAMETER FROM URL
        string url = Request.RawUrl;
        url = Regex.Replace(url, @"&ncp=(\d+)", "", RegexOptions.IgnoreCase);
        url = Regex.Replace(url, @"\?ncp=(\d+)&", "?", RegexOptions.IgnoreCase);
        url = Regex.Replace(url, @"\?ncp=(\d+)", "", RegexOptions.IgnoreCase);
        
        Response.Redirect(url);
    }
}

protected void Session_OnStart()
{
    // SAVE THE REFERRER FOR USE BY THE ORDER MODULE
    if (Request.UrlReferrer != null)
    {
        AbleContext.Current.Session.Referrer = StringHelper.Truncate(Request.UrlReferrer.ToString(), 255);
    }
}

protected void Application_Error(Object sender, EventArgs e)
{
    try
    {
        // ENABLE ERROR LOGGING FOR SCRIPTS OUTSIDE OF THE INSTALL DIRECTORY
        if (!HttpContextHelper.IsInstallRequest())
        {
            // RECORD THE DETAILS TO THE AC ERROR LOG
            HttpContext ctx = HttpContext.Current;
            Exception exception = ctx.Server.GetLastError();
            if (exception != null)
            {
                if (exception is HttpException)
                {
                    // IGNORE 404 RESOURCE NOT FOUND ERRORS
                    if (((HttpException)exception).GetHttpCode() == 404)
                        return;
                    // IGNORE "POTENTIALLTY DANGEROUS" REQUESTS GENERATED BY HACKERSAFE
                    if (((HttpException)exception).Message.StartsWith("A potentially dangerous"))
                        return;
                }

                // IGNORE INVALID VIEW STATE ERRORS
                if (IsViewStateException(exception)) return;

                // IGNORE ERRORS WITHIN AXD RESOURCES
                if (ctx.Request.Path.ToLowerInvariant().EndsWith(".axd")) return;

                string errorInfo = "An error has occured at " + ctx.Request.Url.ToString();
                Logger.Error(errorInfo, exception);
            }
        }
    }
    finally
    {
        AbleContext.ReleaseInstance();
    }
}

protected void Application_Start(Object sender, EventArgs e)
{
    // launch timer in five minutes, check file age once per minute
    _timer = new System.Threading.Timer(new System.Threading.TimerCallback(AbleCommerce.Code.GoogleFeed.FeedTimerTask), null, 300000, 60000);
    
    // ENABLE THE MOBILE DETECTION PROVIDER
    System.Web.Configuration.HttpCapabilitiesBase.BrowserCapabilitiesProvider = (System.Web.Configuration.HttpCapabilitiesProvider)AbleContext.Container.Resolve<CommerceBuilder.Services.IMobileDetection>();
}

protected void Application_End(Object sender, EventArgs e)
{
    if (_timer != null) _timer.Dispose();
}

private bool IsViewStateException(Exception exception)
{
    if (exception == null) return false;
    if (exception is ViewStateException) return true;
    return IsViewStateException(exception.InnerException);
}

public override string GetVaryByCustomString(HttpContext context, string custom)
{
    if (custom == "usergroups")
    {
        User user = AbleContext.Current.User;
        if (user.UserGroups.Count == 0) return string.Empty;
        List<string> groups = new List<string>();
        foreach (UserGroup ug in AbleContext.Current.User.UserGroups)
        {
            groups.Add(ug.GroupId.ToString());
        }
        return string.Join("_", groups);
    }
    return base.GetVaryByCustomString(context, custom);
}
</script>