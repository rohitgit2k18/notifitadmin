//-----------------------------------------------------------------------
// <copyright file="Default.aspx.cs" company="Able Solutions Corporation">
//     Copyright (c) 2011-2014 Able Solutions Corporation. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace AbleCommerce.Install
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Web.Security;
    using System.Web.UI;
    using CommerceBuilder.Utility;

    public partial class Default : System.Web.UI.Page
    {
        protected void Page_Init(object sender, EventArgs e)
        {
            // BUILD A LIST OF MESSAGES
            List<string> messages = new List<string>();

            // CHECK THAT PERMISSIONS ARE SUITABLE FOR INSTALL
            bool permissionsValid = this.TestPermissions(messages);
            if (!permissionsValid || !string.IsNullOrEmpty(Request.QueryString["PERMTEST"]))
            {
                // SOMETHING IS WRONG WITH PERMISSIONS, WE SHOULD DISPLAY THE TEST RESULTS
                LicensePanel.Visible = false;
                PermissionsPanel.Visible = true;
                ProcessIdentity.Text = this.GetProcessIdentity();
                PermissionsTestResult.Text = string.Join(string.Empty, messages.ToArray());
            }

            // this page should not be authenticated
            if (!Page.IsPostBack)
            {
                if (Request.IsAuthenticated)
                {
                    FormsAuthentication.SignOut();
                }
            }
        }

        /// <summary>
        /// Test if permissions are suitable for installation.
        /// </summary>
        /// <param name="messages">A list of messages generated by the test suitable for display to user.</param>
        /// <returns>True if the test was successful and installation can continue, false otherwise.</returns>
        private bool TestPermissions(List<string> messages)
        {
            // FLAG TO TRACK RESULT OF TESTS
            bool permissionsValid = true;

            // DETERMINE THE BASE APPLICATION DIRECTORY
            string baseDirectory = Server.MapPath("~");

            // BUILD LIST OF FILES TO TEST WRITE/DELETE
            string[] testFiles = new string[14];
            testFiles[0] = Server.MapPath("~/App_Data/DELETEME.TXT");
            testFiles[1] = Server.MapPath("~/App_Themes/DELETEME.TXT");
            testFiles[2] = Server.MapPath("~/Assets/DELETEME.TXT");
            testFiles[3] = Server.MapPath("~/webcharts/DELETEME.TXT");
            testFiles[4] = Server.MapPath("~/Assets/ProductImages/DELETEME.TXT");
            testFiles[5] = Server.MapPath("~/App_Data/EmailTemplates/DELETEME.TXT");
            testFiles[6] = Server.MapPath("~/App_Data/EmailTemplates/1/DELETEME.TXT");
            testFiles[7] = Server.MapPath("~/App_Data/Logs/DELETEME.TXT");
            testFiles[8] = Server.MapPath("~/App_Data/DigitalGoods/DELETEME.TXT");
            testFiles[9] = Server.MapPath("~/App_Data/DataExchange/DELETEME.TXT");
            testFiles[10] = Server.MapPath("~/App_Data/DataExchange/Download/DELETEME.TXT");
            testFiles[11] = Server.MapPath("~/App_Data/DataExchange/Upload/DELETEME.TXT");
            testFiles[12] = Server.MapPath("~/App_Data/DbBackup/DELETEME.TXT");
            testFiles[13] = Server.MapPath("~/Feeds/DELETEME.TXT");

            // DEFINE TEMP VARIABLE TO MONITOR EXCEPTIONS
            Exception testException;

            // LOOP THE FILE LIST TO TEST WRITE/DELETE
            foreach (string fileName in testFiles)
            {
                // GET THE DIRECTORY NAME FORMATTED FOR DISPLAY TO UNTRUSTED USER (SHOW PATH RELATIVE TO INSTALL)
                string dirName = Path.GetDirectoryName(fileName).Replace(baseDirectory, "~").Replace("\\", "/");

                // TEST WRITE AND SEE IF WE GET AN EXCEPTION
                testException = FileHelper.CanCreateFile(fileName, "WRITE PERMISSIONS TEST - THIS FILE IS SAFE TO DELETE", true);
                if (testException == null)
                {
                    // NO EXCEPTION OCCURRED, ATTEMPT TO DELETE THE FILE
                    messages.Add("Test write in " + dirName + ": <font color=green>PASSED</font><br />");
                    testException = FileHelper.CanDeleteFile(fileName);
                    if (testException == null)
                    {
                        // NO EXCEPTION OCCURRED, DIRECTORY PERMISSIONS ARE ADEQUATE
                        messages.Add("Test delete in " + dirName + ": <font color=green>PASSED</font><br />");
                    }
                    else
                    {
                        // DELETE ACCESS EXCEPTION OCCURRED, SHOW ANY DIRECTORY PATH RELATIVE TO INSTALL
                        string cleanMessage = testException.Message.Replace(baseDirectory, "~").Replace("\\", "/");
                        messages.Add("Test delete in " + dirName + ": <font color=red>FAILED</font><blockquote>" + cleanMessage + "</blockquote>");
                        permissionsValid = false;
                    }
                }
                else
                {
                    // WRITE ACCESS EXCEPTION OCCURRED, SHOW ANY DIRECTORY PATH RELATIVE TO INSTALL
                    string cleanMessage = testException.Message.Replace(baseDirectory, "~").Replace("\\", "/");
                    messages.Add("Test write in " + dirName + ": <font color=red>FAILED</font><blockquote>" + cleanMessage + "</blockquote>");
                    permissionsValid = false;
                }
            }

            // ENSURE WE CAN READ WEB.CONFIG (HOW COULD THIS EVER BE FALSE?)
            testException = FileHelper.CanReadExistingFile(Server.MapPath("~/web.config"));
            if (testException == null)
            {
                // NO EXCEPTION OCCURRED, READ PERMISSIONS IS CONFIRMED
                messages.Add("Test read of ~/web.config: <font color=green>PASSED</font><br />");
            }
            else
            {
                // READ ACCESS EXCEPTION OCCURRED, SHOW ANY DIRECTORY PATH RELATIVE TO INSTALL
                string cleanMessage = testException.Message.Replace(baseDirectory, "~").Replace("\\", "/");
                messages.Add("Test read of ~/web.config: <font color=red>FAILED</font><blockquote>" + cleanMessage + "</blockquote>");
                permissionsValid = false;
            }

            // BUILD LIST OF FILES TO TEST WRITE ACCESS
            testFiles = new string[2];
            testFiles[0] = Server.MapPath("~/App_Data/database.config");
            testFiles[1] = Server.MapPath("~/App_Data/encryption.config");

            // LOOP THE FILE LIST TO TEST WRITE
            foreach (string fileName in testFiles)
            {
                string cleanFileName = fileName.Replace(baseDirectory, "~").Replace("\\", "/");
                testException = FileHelper.CanWriteExistingFile(fileName);
                if (testException == null)
                {
                    // NO EXCEPTION OCCURRED, DIRECTORY PERMISSIONS ARE ADEQUATE
                    messages.Add("Test write access to " + cleanFileName + ": <font color=green>PASSED</font><br />");
                }
                else
                {
                    // DELETE ACCESS EXCEPTION OCCURRED, SHOW ANY DIRECTORY PATH RELATIVE TO INSTALL
                    string cleanMessage = testException.Message.Replace(baseDirectory, "~").Replace("\\", "/");
                    messages.Add("Test write access to " + cleanFileName + ": <font color=red>FAILED</font><blockquote>" + cleanMessage + "</blockquote>");
                    permissionsValid = false;
                }
            }

            // FUNCTION SUCCEEDS IF NO EXCEPTIONS OCCURRED
            return permissionsValid;
        }

        /// <summary>
        /// Attempts to determine the current process identity.
        /// </summary>
        /// <returns>The current process identity.</returns>
        private string GetProcessIdentity()
        {
            string processIdentity;
            try
            {
                processIdentity = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            }
            catch
            {
                processIdentity = "Unable to determine.  Generally NETWORK SERVICE (Windows 2003/XP) or ASPNET (Windows 2000)";
            }
            return processIdentity;
        }
    }
}